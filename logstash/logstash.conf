input{
  beats {
    port => 5044
  }
}

filter {
  if [service] == "qmul-jobs" {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime", "job_id", "job_name", "group", "memory_allocated", "node", "ncpus", "cpu_time", "rack"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"    
    }
    mutate {
      convert => {
        "ncpus" => "integer"
        "cpu_time" => "integer"
        "memory_allocated" => "integer"
      } 
      add_field => ["id", "%{service}%{job_id}%{node}%{unixtime}"] 
    }
  }
  if [service] == "scarf-jobs" {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime", "job_id", "job_name", "group", "memory_allocated", "node", "ncpus", "cpu_time"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"    
    }
    mutate {
      convert => {
        "ncpus" => "integer"
        "cpu_time" => "integer"
        "memory_allocated" => "integer"
      } 
      add_field => ["id", "%{service}%{job_id}%{node}%{unixtime}"] 
    }
  }
  if [service] == "durham-jobs" {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime", "job_id", "job_name", "group", "memory_allocated", "node", "ncpus", "cpu_time", "watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"    
    }
    mutate {
      convert => {
        "ncpus" => "integer"
        "cpu_time" => "integer"
        "memory_allocated" => "integer"
        "watt_hours" => "float"
      } 
      add_field => ["id", "%{service}%{job_id}%{node}%{unixtime}"] 
    }
  }
  if [service] == "qmul-slurm" {
    csv {
      skip_header => true
      separator => "|"
      columns => ["vAccount","AdminComment","AllocCPUS","AllocNodes","AllocTRES","AssocID","AveCPU","AveCPUFreq","AveDiskRead","AveDiskWrite","AvePages","AveRSS","AveVMSize","BlockID","Cluster","Comment","Constraints","ConsumedEnergy","ConsumedEnergyRaw","Container","CPUTime","CPUTimeRAW","DBIndex","DerivedExitCode","Elapsed","ElapsedRaw","Eligible","End","ExitCode","Flags","GID","Group","JobID","JobIDRaw","JobName","Layout","MaxDiskRead","MaxDiskReadNode","MaxDiskReadTask","MaxDiskWrite","MaxDiskWriteNode","MaxDiskWriteTask","MaxPages","MaxPagesNode","MaxPagesTask","MaxRSS","MaxRSSNode","MaxRSSTask","MaxVMSize","MaxVMSizeNode","MaxVMSizeTask","McsLabel","MinCPU","MinCPUNode","MinCPUTask","NCPUS","NNodes","NodeList","NTasks","Partition","Priority","QOS","QOSRAW","Reason","ReqCPUFreq","ReqCPUFreqGov","ReqCPUFreqMax","ReqCPUFreqMin","ReqCPUS","ReqMem","ReqNodes","ReqTRES","Reservation","ReservationId","Reserved","ResvCPU","ResvCPURAW","Start","State","Submit","SubmitLine","Suspended","SystemComment","SystemCPU","Timelimit","TimelimitRaw","TotalCPU","TRESUsageInAve","TRESUsageInMax","TRESUsageInMaxNode","TRESUsageInMaxTask","TRESUsageInMin","TRESUsageInMinNode","TRESUsageInMinTask","TRESUsageInTot","TRESUsageOutAve","TRESUsageOutMax","TRESUsageOutMaxNode","TRESUsageOutMaxTask","TRESUsageOutMin","TRESUsageOutMinNode","TRESUsageOutMinTask","TRESUsageOutTot","UID","User","UserCPU","WCKey","WCKeyID","WorkDir"]
    }
    mutate { 
      convert => {
        "NCPUS" => "integer"
        "NNodes" => "integer"
        "CPUTimeRAW" => "integer"
        "ElapsedRAW" => "integer"
        "ResvCPURAW" => "integer"
      } 
      remove_field => ["AveCPU","AveCPUFreq","AveDiskRead","AveDiskWrite","AvePages","AveRSS","AveVMSize","BlockID","Comment","Constraints","Container","Layout","MaxDiskRead","MaxDiskReadNode","MaxDiskReadTask","MaxDiskWrite","MaxDiskWriteNode","MaxDiskWriteTask","MaxPages","MaxPagesNode","MaxPagesTask","MaxRSS","MaxRSSNode","MaxRSSTask","MaxVMSize","MaxVMSizeNode","MaxVMSizeTask","McsLabel","MinCPU","MinCPUNode","MinCPUTask","NTasks","Reservation","ReservationId","SystemComment","AdminComment","TRESUsageInAve","TRESUsageInMax","TRESUsageInMaxNode","TRESUsageInMaxTask","TRESUsageInMin","TRESUsageInMinNode","TRESUsageInMinTask","TRESUsageInTot","TRESUsageOutAve","TRESUsageOutMax","TRESUsageOutTot","TRESUsageOutMinTask","TRESUsageOutMinNode","TRESUsageOutMin","TRESUsageOutMaxTask","TRESUsageOutMaxNode","WCKey","ReqCPUFreq","ReqCPUFreqGov","ReqCPUFreqMin","ReqCPUFreqMax"]
      add_field => ["id", "%{JobID}"]
    } 
  }
  else if [service] in ["durham-slurm", "durham-slurm-steps"] {
    csv {
      skip_header => true
      separator => "|"
      columns => ["Account", "AdminComment", "AllocCPUS", "AllocNodes", "AllocTRES", "AssocID", "AveCPU", "AveCPUFreq", "AveDiskRead", "AveDiskWrite", "AvePages", "AveRSS", "AveVMSize", "BlockID", "Cluster", "Comment", "Constraints", "ConsumedEnergy", "ConsumedEnergyRaw", "CPUTime", "CPUTimeRAW", "DBIndex", "DerivedExitCode", "Elapsed", "ElapsedRaw", "Eligible", "End", "ExitCode", "Flags", "GID", "Group", "JobID", "JobIDRaw", "JobName", "Layout", "MaxDiskRead", "MaxDiskReadNode", "MaxDiskReadTask", "MaxDiskWrite", "MaxDiskWriteNode", "MaxDiskWriteTask", "MaxPages", "MaxPagesNode", "MaxPagesTask", "MaxRSS", "MaxRSSNode", "MaxRSSTask", "MaxVMSize", "MaxVMSizeNode", "MaxVMSizeTask", "McsLabel", "MinCPU", "MinCPUNode", "MinCPUTask", "NCPUS", "NNodes", "NodeList", "NTasks", "Partition", "Priority", "QOS", "QOSRAW", "Reason", "ReqCPUFreq", "ReqCPUFreqGov", "ReqCPUFreqMax", "ReqCPUFreqMin", "ReqCPUS", "ReqMem", "ReqNodes", "ReqTRES", "Reservation", "ReservationId", "Reserved", "ResvCPU", "ResvCPURAW", "Start", "State", "Submit", "Suspended", "SystemComment", "SystemCPU", "Timelimit", "TimelimitRaw", "TotalCPU", "TRESUsageInAve", "TRESUsageInMax", "TRESUsageInMaxNode", "TRESUsageInMaxTask", "TRESUsageInMin", "TRESUsageInMinNode", "TRESUsageInMinTask", "TRESUsageInTot", "TRESUsageOutAve", "TRESUsageOutMax", "TRESUsageOutMaxNode", "TRESUsageOutMaxTask", "TRESUsageOutMin", "TRESUsageOutMinNode", "TRESUsageOutMinTask", "TRESUsageOutTot", "UID", "UserCPU", "WCKey", "WCKeyID", "WorkDir"]
    }
    mutate {
      convert => {
        "NCPUS" => "integer"
        "NNodes" => "integer"
        "CPUTimeRAW" => "integer"
        "ElapsedRAW" => "integer"
        "ResvCPURAW" => "integer"
        "AveCPU" => "integer"
        "AveDiskRead" => "integer"
        "AveRSS" => "integer"
        "AveVMSize" => "integer"
      } 
      remove_field => ["TRESUsageInMaxNode","TRESUsageInMaxTask","TRESUsageInMin","TRESUsageInMinNode","TRESUsageInMinTask","TRESUsageInTot","TRESUsageOutAve","TRESUsageOutMax","TRESUsageOutTot","TRESUsageOutMinTask","TRESUsageOutMinNode","TRESUsageOutMin","TRESUsageOutMaxTask","TRESUsageOutMaxNode","AdminComment","Comment","Constraints","BlockID","McsLabel","Reservation","ReservationId","SystemComment","WCKey","ConsumedEnergy","ConsumedEnergyRaw" ]
      add_field => ["id", "%{JobID}"]
    }
  }
  else if [service] == "scarf-slurm" {
    csv {
      skip_header => true
      separator => ";"
      columns => ["job_id","job_name","group","user","start","end","job_state","nodes","nnodes","alloc_cpu","alloc_mem","alloc_node","alloc_gres","working_directory","elapsed_time","cpu_time_raw"]
    }
    date {
      match => ["start", "UNIX"]
      target => "start_timestamp"
      timezone => "UTC"    
    }
    date {
      match => ["end", "UNIX"]
      target => "end_timestamp"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "nnodes" => "integer"
        "alloc_cpu" => "integer"
        "alloc_mem" => "integer"
        "alloc_node" => "integer"
        "alloc_gres" => "integer"
        "elapsed_time" => "integer"
        "cpu_time_raw" => "integer"
      }
      add_field => ["id", "%{job_id}"] 
    }
  } 
  else if [service] == "scarf-slurm-steps" {
    csv {
      skip_header => true
      separator => ";"
      columns => ["job_id","step_name","alloc_cpu","alloc_node_count","alloc_nodes","elapsed_time","alloc_cpu_time","alloc_mem","alloc_vmem","alloc_gres","req_avg_mem","req_avg_fs","req_avg_vmem","req_avg_pages","start","end"]
    }
    date {
      match => ["start", "UNIX"]
      target => "start_timestamp"
      timezone => "UTC"    
    }
    date {
      match => ["end", "UNIX"]
      target => "end_timestamp"
      timezone => "UTC"
    }
    mutate { 
      convert => {
        "alloc_cpu" => "integer"
        "alloc_node" => "integer"
        "elapsed_time" => "integer"
        "alloc_cpu_time" => "integer"
        "alloc_vmem" => "integer"
        "alloc_gres" => "integer"
        "req_avg_mem" => "integer"
        "req_avg_fs" => "integer"
        "req_avg_vmem" => "integer"
        "req_avg_pages" => "integer"
      }
      add_field => ["id", "%{job_id}"] 
    }
  } 
  else if [service] == "durham-slurm-energy" {
    csv {
      skip_header => true
      separator => ","
      columns => ["job_id","watts","nnodes","duration","project","partition","start","end","watt_hours"] 
    }
    date {
      match => ["start", "UNIX"]
      target => "start_timestamp"
      timezone => "UTC"
    }
    date {
      match => ["end", "UNIX"]
      target => "end_timestamp"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "start" => "integer"
        "end" => "integer"
        "watts" => "float"
        "nnodes" => "integer"
	"duration" => "float"
        "watt_hours" => "float"
      }
      add_field => ["id", "%{job_id}"]
    }
  }
  else if [service] == "durham-slurm-energy-notimestamp" {
    csv {
      skip_header => true
      separator => ","
      columns => ["job_id","watts","nnodes","duration","project","partition","watt_hours"] 
    }
    mutate {
      convert => {
        "watts" => "float"
        "nnodes" => "integer"
	"duration" => "float"
        "watt_hours" => "float"
      }
      add_field => ["id", "%{job_id}"]
    }
  }
  else if [service] == "qmul-compute-turbostat" {
    csv {
      skip_header => true
      separator => ","
      columns => ["avg_mhz","busy_%","bzy_mhz","tsc_mhz","irq","smi","poll","c1","c1e","c6","poll_%","c1_%","c1e_%","c6_%","cpu_%_c1","cpu_%_c6","core_tmp","pkg_tmp","pkg_%_pc2","pkg_%_pc6","pkg_j","ram_j","pkg_%","ram_%","hostname","unixtime", total_joules, watt_hours, rack] 
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "avg_mHz" => "integer"
        "busy_%" => "float"
        "bzy_mhz" => "integer"
        "tsc_mhz" => "integer"
        "irq" => "integer"
        "smi" => "integer"
        "poll" => "integer"
	"c1" => "float"
	"c1e" => "float"
	"c6" => "float"
	"poll_%" => "float"
	"c1_%" => "float"
	"c1e_%" => "float"
	"c6_%" => "float"
	"cpu_%_c1" => "float"
	"cpu_%_c6" => "float"
	"core_tmp" => "integer"
	"pkg_tmp" => "integer"
	"pkg_%_pc2" => "float"
	"pkg_%_pc6" => "float"
	"pkg_j" => "float"
	"ram_j" => "float"
	"pkg_%" => "float"
	"ram_%" => "float"
	"total_joules" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostname}"]
    }
  }
  else if [service]  == "qmul-compute-ipmi" {
    csv {
      skip_header => true
      separator => ","
      columns => ["date", "time", "unixtime", "hostname", "cumulative_watt_hours", "watt_hours", "rack"] 
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
	"cumulative_watt_hours" => "float"
	"watt_hours" => "float"
      }
      remove_field => ["date", "time"]
      add_field => ["id", "%{unixtime}%{hostname}"]
    }
  } 
  else if [service]  == "qmul-racks" {
    csv {
      skip_header => true
      separator => ","
      columns => ["date", "time", "unixtime", "rack", "cumulative_watt_hours", "watt_hours"] 
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
	"cumulative_watt_hours" => "float"
	"watt_hours" => "float"
      }
      remove_field => ["date", "time"]
      add_field => ["id", "%{unixtime}%{rack}"]
    }
  } 
  else if [service] in ["scarf-pdus", "cloud-pdus"] {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime","device","model","rack","total_amps","bank1_amps","bank2_amps","volts","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
	"total_amps" => "float"
	"bank1_amps" => "float"
	"bank2_amps" => "float"
	"volts" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{device}"] 
    }
  } 
  else if [service] == "scarf-devices" {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime","device","model","rack","psu1_amps","psu2_amps","psu1_volts","psu2_volts","psu1_watts","psu2_watts","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
	"psu1_amps" => "float"
	"psu2_amps" => "float"
	"psu1_volts" => "float"
        "psu2_volts" => "float"
	"psu1_watts" => "float"
	"psu2_watts" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{device}"] 
    }
  } 
  else if [service]  == "scarf-devices-other" {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime","device","model","rack","amps","volts","watts","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
	"amps" => "float"
	"volts" => "float"
	"watts" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{device}"]
    }
  } 
  else if [service]  == "scarf-compute" {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime","hostname","model","rack","watts","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
	"watts" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostname}"]
    }
  }
  else if [service] in ["cloud-compute", "cloud-storage"] {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime","watts","hostname","sampling_period","max","min","watt_hours","rack","model"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
	"watts" => "float"
	"min" => "float"
	"max" => "float"
	"sampling_period" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostname}"]
    }
  }
  else if [service] == "ic-compute" {
    csv {
     skip_header => true
      separator => ","
      columns => ["unixtime", "watts", "load1", "load5", "load15", "cpu_use", "cpu_idle", "hostip", "watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "watts" => "float"
        "load1" => "float"
        "load5" => "float"
        "load15" => "float"
        "cpu_use" => "float"
        "cpu_idle" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostip}"]
    }
  }
  else if [service] == "durham-pdus-cosma8" {
    csv {
      skip_header => true
      separator => ","
      columns => ["bank_1_amps","bank_1_watts","bank_2_amps","bank_2_watts","bank_3_amps","bank_3_watts","bank_4_amps","bank_4_watts","bank_5_amps","bank_5_watts","bank_6_amps","bank_6_watts","unixtime","hostname","watts","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "bank_1_amps" => "float"
        "bank_1_watts" => "float"
        "bank_2_amps" => "float"
        "bank_2_watts" => "float"
        "bank_3_amps" => "float"
        "bank_3_watts" => "float"
	"bank_4_amps" => "float"
        "bank_4_watts" => "float"
        "bank_5_amps" => "float"
        "bank_5_watts" => "float"
        "bank_6_amps" => "float"
        "bank_6_watts" => "float"
        "watts" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostname}"]
    }
  }
  else if [service] == "durham-pdus-cosma7" {
    csv {
      skip_header => true
      separator => ","
      columns => ["voltsA","voltsB","voltsC","ampsA","ampsB","ampsC","kwA","kwB","kwC","unixtime","hostname","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "voltsA" => "float"
        "voltsB" => "float"
        "voltsC" => "float"
        "ampsA" => "float"
        "ampsB" => "float"
        "ampsC" => "float"
	"kwA" => "float"
        "kwB" => "float"
        "kwC" => "float"
	"watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostname}"]
    }

  }
  else if [service] == "durham-pdus-storage" {
    csv {
      skip_header => true
      separator => ","
      columns => ["bank_1_amps","bank_1_watts","bank_2_amps","bank_2_watts","unixtime","hostname","watts","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "bank_1_watts" => "float"
        "bank_1_amps" => "float"
        "bank_2_watts" => "float"
        "bank_2_amps" => "float"
        "watts" => "float"
        "watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostname}"]
    }
  }
  else if [service] in ["durham-compute-cosma7", "durham-compute-cosma8"] {
    csv {
      skip_header => false
      separator => ","
      columns => ["hostname","unixtime","watts","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "watts" => "float"
        "watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{hostname}"]
    }
  }
  else if [service] == "cambridge-compute" {
    csv {
      skip_header => true
      separator => ","
      columns => ["unixtime","node","busy_system","busy_user","busy_iowait","busy_irqs","busy_other","idle","ram_total","ram_used","ram_cache_and_buffer","ram_free","swap_used","power","watt_hours"]
    }
    date {
      match => ["unixtime", "UNIX"]
      target => "date_logged"
      timezone => "UTC"
    }
    mutate {
      convert => {
        "busy_system" => "float"
        "busy_user" => "float"
        "busy_iowait" => "float"
        "busy_irqs" => "float"
        "busy_other" => "float"
        "idle" => "integer"
        "ram_total" => "integer"
        "ram_used" => "integer"
        "ram_free" => "integer"
        "swap_used" => "float"
        "power" => "float"
        "watt_hours" => "float"
      }
      add_field => ["id", "%{unixtime}%{node}"]
    }
  }
  mutate {
    remove_field => ["prospector", "@version", "source", "input.type", "log.file.path", "log.offset", "agent.ephemeral_id", "agent.hostname", "agent.id", "agent.name", "agent.type", "agent.version", "ecs.version", "@timestamp", "beat.name", "beat.version", "fields", "offset", "tags", "message" ]
  } 
}


output {
  if [service] in ["qmul-jobs", "durham-jobs", "scarf-jobs", "qmul-slurm", "qmul-compute-ipmi", "qmul-compute-turbostat", "qmul-racks", "ic-compute", "durham-slurm", "durham-slurm-steps", "durham-slurm-energy", "durham-pdus-cosma7", "durham-pdus-cosma8", "durham-pdus-storage", "durham-compute-cosma7", "durham-compute-cosma8", "durham-slurm-energy-notimestamp", "scarf-pdus", "scarf-devices", "scarf-devices-other", "scarf-compute", "scarf-slurm", "scarf-slurm-steps", "cloud-pdus", "cloud-compute", "cloud-storage", "cambridge-compute"]{
    opensearch {
      hosts => ["<opensearch-host-ip>:9200"]
      index => "%{[service]}"
      user => "admin"
      password => "admin"
      ssl => true
      ssl_certificate_verification => false
      document_id => "%{[id]}"
    } 
  }
}


